let t=(()=>{class t{static readPostsFile(){return new Promise(s=>{fetch("/posts.json").then(t=>t.json()).then(e=>{e&&e.posts&&(e.posts=e.posts.map(t=>(t.metadata.date=new Date(t.metadata.date),t)),e.posts.sort((t,s)=>s.metadata.date-t.metadata.date),t.posts=e.posts,t.config={posts_route:e.postsRoute}),s({config:t.config,posts:t.posts})})})}static readPosts(s=0,e){return new Promise(async a=>{let r,o;t.posts&&0!=t.posts.length?r=t.posts:({posts:r}=await this.readPostsFile()),o=r.slice(s,e||r.length),a(o)})}static goToPost(s,e){s.push(`/${t.config.posts_route}/`+e.unique_link,e.metadata)}static getMetadataForPost(t){return this.getPropertyForPost(t,"metadata")}static getFileForPost(t){return this.getPropertyForPost(t,"file")}static getPropertyForPost(t,s){let e=this.getPost(t);return e?e[s]:null}static getPost(s){let e=t.posts.filter(t=>t.unique_link===s);return e&&e[0]?e[0]:null}}return t.config={posts_route:"blog"},t.posts=[],t})();function s(t){let s="";return t&&(s='<ul class="tag-list">',s=t.split(",").reduce((t,s)=>t+`<li class="tag-${s=s.trim()}">${s}</li>`,'<ul class="tag-list">'),s+="</ul>"),s}export{t as B,s as t}